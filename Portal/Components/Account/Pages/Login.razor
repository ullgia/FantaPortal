@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Domain.Entities

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Accedi - FantaAsta</PageTitle>

<RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Style="min-height: 100vh; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
    <RadzenColumn Size="12" SizeMD="8" SizeLG="6" SizeXL="4">
        <RadzenCard Style="padding: 2rem; background: white; border-radius: 12px; box-shadow: 0 20px 40px rgba(0,0,0,0.15);">
            <RadzenStack Gap="2rem">
                <RadzenStack Gap="1rem" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                    <RadzenIcon Icon="sports_soccer" Style="font-size: 3rem; color: #667eea;" />
                    <RadzenText TextStyle="TextStyle.H3" Style="color: #333; font-weight: 600;">
                        FantaAsta
                    </RadzenText>
                </RadzenStack>

                <RadzenText TextStyle="TextStyle.Body1" Style="text-align: center; color: #666;">
                    Accedi al tuo account per continuare
                </RadzenText>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <RadzenAlert AlertStyle="AlertStyle.Danger" ShowIcon="true">
                        @errorMessage
                    </RadzenAlert>
                }

                <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                    <DataAnnotationsValidator />
                    <RadzenStack Gap="1.5rem">
                        <RadzenFormField Text="Email" Variant="Variant.Outlined">
                            <RadzenTextBox @bind-Value="Input.Email" Placeholder="inserisci la tua email" Style="width: 100%;" />
                            <ValidationMessage For="() => Input.Email" class="text-danger" />
                        </RadzenFormField>

                        <RadzenFormField Text="Password" Variant="Variant.Outlined">
                            <RadzenPassword @bind-Value="Input.Password" Placeholder="inserisci la password" Style="width: 100%;" />
                            <ValidationMessage For="() => Input.Password" class="text-danger" />
                        </RadzenFormField>

                        <RadzenCheckBox @bind-Value="Input.RememberMe" Name="rememberMe" />
                        <RadzenLabel Text="Ricordami" Component="rememberMe" Style="margin-left: 8px;" />

                        <RadzenButton ButtonType="ButtonType.Submit" 
                                    ButtonStyle="ButtonStyle.Primary" 
                                    Size="ButtonSize.Large" 
                                    Style="width: 100%; margin-top: 1rem;"
                                    Text="Accedi" 
                                    Icon="login" />
                    </RadzenStack>
                </EditForm>

                <RadzenStack Gap="0.5rem" Style="text-align: center;">
                    <RadzenLink Path="Account/ForgotPassword" Text="Password dimenticata?" Style="color: #667eea;" />
                    <RadzenLink Path="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" Text="Registrati come nuovo utente" Style="color: #667eea;" />
                    <RadzenLink Path="Account/ResendEmailConfirmation" Text="Invia nuovamente conferma email" Style="color: #667eea;" />
                </RadzenStack>

                <ExternalLoginPicker />
            </RadzenStack>
        </RadzenCard>
    </RadzenColumn>
</RadzenRow>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
