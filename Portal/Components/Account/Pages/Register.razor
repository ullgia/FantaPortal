@page "/Account/Register"
@layout Layout.AccountAuthLayout

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Domain.Entities

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Register> Logger
@inject IdentityRedirectManager RedirectManager

<PageTitle>Registrati</PageTitle>

<RadzenStack Gap="1.25rem">
    <RadzenStack Gap="0.5rem" AlignItems="AlignItems.Center">
        <div class="auth-title">Crea account</div>
        <div class="auth-subtitle">Registrati per partecipare alle aste</div>
    </RadzenStack>

    @if (!string.IsNullOrEmpty(Message))
    {
        <RadzenAlert AlertStyle="AlertStyle.Danger" ShowIcon="true">@Message</RadzenAlert>
    }

    <EditForm Model="Input" method="post" OnValidSubmit="RegisterUser" FormName="register">
        <DataAnnotationsValidator />
        <RadzenStack Gap="1rem">
            <RadzenFormField Text="Email" Variant="Variant.Outlined">
                <RadzenTextBox @bind-Value="Input.Email" Placeholder="Email" Style="width:100%;" />
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </RadzenFormField>
            <RadzenFormField Text="Password" Variant="Variant.Outlined">
                <RadzenPassword @bind-Value="Input.Password" Placeholder="Password" Style="width:100%;" />
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </RadzenFormField>
            <RadzenFormField Text="Conferma Password" Variant="Variant.Outlined">
                <RadzenPassword @bind-Value="Input.ConfirmPassword" Placeholder="Conferma Password" Style="width:100%;" />
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </RadzenFormField>
            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Primary" Style="width:100%;margin-top:0.5rem;" Text="Registrati" Icon="person_add" />
        </RadzenStack>
    </EditForm>

    <div class="auth-footer-links">
        <a href="Account/Login">Hai già un account? Accedi</a>
    </div>
</RadzenStack>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();
    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : string.Join(", ", identityErrors.Select(e => e.Description));

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();
        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = (IUserEmailStore<ApplicationUser>)UserStore;
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");
        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try { return Activator.CreateInstance<ApplicationUser>(); }
        catch { throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'."); }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessage = "Le password non coincidono.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
