@page "/Account/ResetPassword"
@layout Layout.AccountAuthLayout

@using System.ComponentModel.DataAnnotations
@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Domain.Entities

@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Reset password</PageTitle>

<RadzenStack Gap="1.25rem">
    <div class="auth-title">Reset Password</div>
    <div class="auth-subtitle">Inserisci i dati per impostare la nuova password</div>

    @if (!string.IsNullOrEmpty(Message))
    {
        <RadzenAlert AlertStyle="AlertStyle.Danger" ShowIcon="true">@Message</RadzenAlert>
    }

    <EditForm Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
        <DataAnnotationsValidator />
        <RadzenStack Gap="1rem">
            <RadzenTextBox @bind-Value="Input.Email" Placeholder="Email" Style="width:100%;" />
            <ValidationMessage For="() => Input.Email" class="text-danger" />
            <RadzenPassword @bind-Value="Input.Password" Placeholder="Nuova Password" Style="width:100%;" />
            <ValidationMessage For="() => Input.Password" class="text-danger" />
            <RadzenPassword @bind-Value="Input.ConfirmPassword" Placeholder="Conferma Password" Style="width:100%;" />
            <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Primary" Style="width:100%;" Text="Reset" Icon="lock_reset" />
        </RadzenStack>
    </EditForm>

    <div class="auth-footer-links">
        <a href="Account/Login">Torna al login</a>
    </div>
</RadzenStack>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();
    [SupplyParameterFromQuery] private string? Code { get; set; }

    private string? Message => identityErrors is null ? null : string.Join(", ", identityErrors.Select(e => e.Description));

    protected override void OnInitialized()
    {
        if (Code is null)
        {
            // Se manca il codice ritorna al flusso forgot
            RedirectManager.RedirectTo("Account/ForgotPassword");
        }
        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
        if (result.Succeeded)
        {
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }
        identityErrors = result.Errors;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";
        [Required]
        [StringLength(100, MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessage = "Le password non coincidono.")]
        public string ConfirmPassword { get; set; } = "";
        [Required] public string Code { get; set; } = "";
    }
}
