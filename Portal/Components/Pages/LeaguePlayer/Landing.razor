@page "/player/league/{leagueId:guid}"
@attribute [Authorize(Roles = "LeaguePlayer")]
@using Application.Services
@inject IAuctionQueries AuctionQueries
@inject NavigationManager Navigation
@inject Portal.Auth.IMagicGrantAccessor GrantAccessor
@using Radzen
@using Radzen.Blazor

<PageTitle>Sessione Asta</PageTitle>

@if (isLoading)
{
    <RadzenProgressBarCircular ShowValue="false" />
}
else if (overview == null)
{
    <RadzenCard Style="max-width:600px;margin:2rem auto;">
        <RadzenStack Gap="0.5rem" AlignItems="AlignItems.Center">
            <RadzenIcon Icon="hourglass_empty" Style="font-size:3rem;color:#888;" />
            <RadzenText TextStyle="TextStyle.H5">Nessuna sessione d'asta attiva</RadzenText>
            <RadzenText TextStyle="TextStyle.Body2" Style="color:#666;">Attendi che il master avvii l'asta.</RadzenText>
        </RadzenStack>
    </RadzenCard>
}
else
{
    <RadzenCard Style="max-width:600px;margin:1rem auto;">
        <RadzenStack Gap="0.5rem" AlignItems="AlignItems.Center">
            <RadzenText TextStyle="TextStyle.H5">Asta Attiva - @overview.LeagueName</RadzenText>
            <RadzenBadge BadgeStyle="BadgeStyle.Primary" Text="@overview.Status.ToString()" />
            <RadzenText TextStyle="TextStyle.Body2">Turno @overview.CurrentTurnPosition / @overview.TotalTeams</RadzenText>
            <RadzenButton Text="Entra" Icon="login" Click="EnterAuction" />
        </RadzenStack>
    </RadzenCard>
}

@code {
    [Parameter] public Guid LeagueId { get; set; } // Route still provides Guid; converted when needed
    private AuctionOverviewDto? overview;
    private bool isLoading = true;

    protected override async Task OnParametersSetAsync()
    {
        var grant = GrantAccessor.Current;
    if (grant == null || grant.LeagueId != LeagueId || grant.IsGuest)
        {
            // Invalid context -> back to home (will re-route)
            Navigation.NavigateTo("/", true);
            return;
        }

        if (LeagueId == Guid.Empty)
        {
            isLoading = false;
            return;
        }
    overview = await AuctionQueries.GetAuctionOverviewAsync(LeagueId);
        isLoading = false;
    }

    private void EnterAuction()
    {
        if (overview != null)
        {
            Navigation.NavigateTo($"/auction/{overview.AuctionId}");
        }
    }
}
